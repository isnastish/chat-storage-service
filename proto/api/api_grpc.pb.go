// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.4
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatStorageService_HasParticipant_FullMethodName        = "/api.ChatStorageService/HasParticipant"
	ChatStorageService_RegisterParticipant_FullMethodName   = "/api.ChatStorageService/RegisterParticipant"
	ChatStorageService_AuthorizeParticipant_FullMethodName  = "/api.ChatStorageService/AuthorizeParticipant"
	ChatStorageService_HasChannel_FullMethodName            = "/api.ChatStorageService/HasChannel"
	ChatStorageService_RegisterChannel_FullMethodName       = "/api.ChatStorageService/RegisterChannel"
	ChatStorageService_DeleteChannel_FullMethodName         = "/api.ChatStorageService/DeleteChannel"
	ChatStorageService_GetGeneralChatHistory_FullMethodName = "/api.ChatStorageService/GetGeneralChatHistory"
	ChatStorageService_GetChannelHistory_FullMethodName     = "/api.ChatStorageService/GetChannelHistory"
	ChatStorageService_GetChannelList_FullMethodName        = "/api.ChatStorageService/GetChannelList"
	ChatStorageService_GetParticipantList_FullMethodName    = "/api.ChatStorageService/GetParticipantList"
	ChatStorageService_SendMessage_FullMethodName           = "/api.ChatStorageService/SendMessage"
)

// ChatStorageServiceClient is the client API for ChatStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatStorageServiceClient interface {
	HasParticipant(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	RegisterParticipant(ctx context.Context, in *Participant, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AuthorizeParticipant(ctx context.Context, in *Participant, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	HasChannel(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	RegisterChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteChannel(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	GetGeneralChatHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChatHistory, error)
	GetChannelHistory(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetChannelList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChannelList, error)
	GetParticipantList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ParticipanList, error)
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ChatMessage, emptypb.Empty], error)
}

type chatStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatStorageServiceClient(cc grpc.ClientConnInterface) ChatStorageServiceClient {
	return &chatStorageServiceClient{cc}
}

func (c *chatStorageServiceClient) HasParticipant(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, ChatStorageService_HasParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatStorageServiceClient) RegisterParticipant(ctx context.Context, in *Participant, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatStorageService_RegisterParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatStorageServiceClient) AuthorizeParticipant(ctx context.Context, in *Participant, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, ChatStorageService_AuthorizeParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatStorageServiceClient) HasChannel(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, ChatStorageService_HasChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatStorageServiceClient) RegisterChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatStorageService_RegisterChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatStorageServiceClient) DeleteChannel(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, ChatStorageService_DeleteChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatStorageServiceClient) GetGeneralChatHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChatHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatHistory)
	err := c.cc.Invoke(ctx, ChatStorageService_GetGeneralChatHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatStorageServiceClient) GetChannelHistory(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatStorageService_GetChannelHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatStorageServiceClient) GetChannelList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChannelList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelList)
	err := c.cc.Invoke(ctx, ChatStorageService_GetChannelList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatStorageServiceClient) GetParticipantList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ParticipanList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParticipanList)
	err := c.cc.Invoke(ctx, ChatStorageService_GetParticipantList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatStorageServiceClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ChatMessage, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatStorageService_ServiceDesc.Streams[0], ChatStorageService_SendMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatStorageService_SendMessageClient = grpc.ClientStreamingClient[ChatMessage, emptypb.Empty]

// ChatStorageServiceServer is the server API for ChatStorageService service.
// All implementations must embed UnimplementedChatStorageServiceServer
// for forward compatibility.
type ChatStorageServiceServer interface {
	HasParticipant(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	RegisterParticipant(context.Context, *Participant) (*emptypb.Empty, error)
	AuthorizeParticipant(context.Context, *Participant) (*wrapperspb.BoolValue, error)
	HasChannel(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	RegisterChannel(context.Context, *Channel) (*emptypb.Empty, error)
	DeleteChannel(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	GetGeneralChatHistory(context.Context, *emptypb.Empty) (*ChatHistory, error)
	GetChannelHistory(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	GetChannelList(context.Context, *emptypb.Empty) (*ChannelList, error)
	GetParticipantList(context.Context, *emptypb.Empty) (*ParticipanList, error)
	SendMessage(grpc.ClientStreamingServer[ChatMessage, emptypb.Empty]) error
	mustEmbedUnimplementedChatStorageServiceServer()
}

// UnimplementedChatStorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatStorageServiceServer struct{}

func (UnimplementedChatStorageServiceServer) HasParticipant(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasParticipant not implemented")
}
func (UnimplementedChatStorageServiceServer) RegisterParticipant(context.Context, *Participant) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterParticipant not implemented")
}
func (UnimplementedChatStorageServiceServer) AuthorizeParticipant(context.Context, *Participant) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeParticipant not implemented")
}
func (UnimplementedChatStorageServiceServer) HasChannel(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasChannel not implemented")
}
func (UnimplementedChatStorageServiceServer) RegisterChannel(context.Context, *Channel) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterChannel not implemented")
}
func (UnimplementedChatStorageServiceServer) DeleteChannel(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedChatStorageServiceServer) GetGeneralChatHistory(context.Context, *emptypb.Empty) (*ChatHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeneralChatHistory not implemented")
}
func (UnimplementedChatStorageServiceServer) GetChannelHistory(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelHistory not implemented")
}
func (UnimplementedChatStorageServiceServer) GetChannelList(context.Context, *emptypb.Empty) (*ChannelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelList not implemented")
}
func (UnimplementedChatStorageServiceServer) GetParticipantList(context.Context, *emptypb.Empty) (*ParticipanList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantList not implemented")
}
func (UnimplementedChatStorageServiceServer) SendMessage(grpc.ClientStreamingServer[ChatMessage, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatStorageServiceServer) mustEmbedUnimplementedChatStorageServiceServer() {}
func (UnimplementedChatStorageServiceServer) testEmbeddedByValue()                            {}

// UnsafeChatStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatStorageServiceServer will
// result in compilation errors.
type UnsafeChatStorageServiceServer interface {
	mustEmbedUnimplementedChatStorageServiceServer()
}

func RegisterChatStorageServiceServer(s grpc.ServiceRegistrar, srv ChatStorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedChatStorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatStorageService_ServiceDesc, srv)
}

func _ChatStorageService_HasParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatStorageServiceServer).HasParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatStorageService_HasParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatStorageServiceServer).HasParticipant(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatStorageService_RegisterParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Participant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatStorageServiceServer).RegisterParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatStorageService_RegisterParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatStorageServiceServer).RegisterParticipant(ctx, req.(*Participant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatStorageService_AuthorizeParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Participant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatStorageServiceServer).AuthorizeParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatStorageService_AuthorizeParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatStorageServiceServer).AuthorizeParticipant(ctx, req.(*Participant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatStorageService_HasChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatStorageServiceServer).HasChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatStorageService_HasChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatStorageServiceServer).HasChannel(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatStorageService_RegisterChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatStorageServiceServer).RegisterChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatStorageService_RegisterChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatStorageServiceServer).RegisterChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatStorageService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatStorageServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatStorageService_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatStorageServiceServer).DeleteChannel(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatStorageService_GetGeneralChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatStorageServiceServer).GetGeneralChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatStorageService_GetGeneralChatHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatStorageServiceServer).GetGeneralChatHistory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatStorageService_GetChannelHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatStorageServiceServer).GetChannelHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatStorageService_GetChannelHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatStorageServiceServer).GetChannelHistory(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatStorageService_GetChannelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatStorageServiceServer).GetChannelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatStorageService_GetChannelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatStorageServiceServer).GetChannelList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatStorageService_GetParticipantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatStorageServiceServer).GetParticipantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatStorageService_GetParticipantList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatStorageServiceServer).GetParticipantList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatStorageService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatStorageServiceServer).SendMessage(&grpc.GenericServerStream[ChatMessage, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatStorageService_SendMessageServer = grpc.ClientStreamingServer[ChatMessage, emptypb.Empty]

// ChatStorageService_ServiceDesc is the grpc.ServiceDesc for ChatStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ChatStorageService",
	HandlerType: (*ChatStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HasParticipant",
			Handler:    _ChatStorageService_HasParticipant_Handler,
		},
		{
			MethodName: "RegisterParticipant",
			Handler:    _ChatStorageService_RegisterParticipant_Handler,
		},
		{
			MethodName: "AuthorizeParticipant",
			Handler:    _ChatStorageService_AuthorizeParticipant_Handler,
		},
		{
			MethodName: "HasChannel",
			Handler:    _ChatStorageService_HasChannel_Handler,
		},
		{
			MethodName: "RegisterChannel",
			Handler:    _ChatStorageService_RegisterChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _ChatStorageService_DeleteChannel_Handler,
		},
		{
			MethodName: "GetGeneralChatHistory",
			Handler:    _ChatStorageService_GetGeneralChatHistory_Handler,
		},
		{
			MethodName: "GetChannelHistory",
			Handler:    _ChatStorageService_GetChannelHistory_Handler,
		},
		{
			MethodName: "GetChannelList",
			Handler:    _ChatStorageService_GetChannelList_Handler,
		},
		{
			MethodName: "GetParticipantList",
			Handler:    _ChatStorageService_GetParticipantList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _ChatStorageService_SendMessage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
